export interface LangConfig {
    [key: string]: {
        header: string[];
        mainInfo: string;
        advantages: string;
        footer: string[];
        buttons: string[];
        window: string[];
        docs: {
            [key: string | number]: string | string[] | { [key: string | number]: string[] };
        };
    };
}

export const lang: LangConfig = {
    EN: {
        header: ["Editor", "Documentation", "Home", "Community"],
        mainInfo: "is designed primarily as event-driven and object-oriented. The combination of the two paradigms will greatly simplify the design of the architecture of your programs while respecting the provided conventions.",
        advantages: "A few examples of axl's advantages: high performance, easy learning curve, flexible syntax, strong type system, and excellent tooling support.",
        footer: ["Â© 2024 Axolotl Team", "Privacy Policy", "Terms of Service", "Contact Us"],
        buttons: ["OK", "Cancel", "Accept", "Learn More"],
        window: ["Axolotl Programming Language"],
        docs: {
            headers: ["Introduction", "Paradigms", "Functions", "Methods", "Interfaces", "Abstract classes", "Classes", "Handlers", "Abstract modules", "Modules", "Annotations", "Decorators"],
            pageNav: {
                introduction: ["Getting Started", "Introduction"],
                paradigms: ["Object-Oriented Programming", "Event-Driven Programming", "Functional Programming"],
                functions: ["Functions", "Methods", "Interfaces", "Abstract Classes", "Classes", "Handlers", "Abstract Modules", "Modules"],
                methods: ["Annotations", "Decorators"],
            },
            introduction: `
                <h3>Getting Started</h3>
                <p>First, you need to install the Axolotl compiler. You can do this by running the following command:</p>
                <pre>npm install -g axolotl-compiler</pre>
                <p>After that, you can compile your Axolotl code by running the following command:</p>
                <pre>axolotl compile yourfile.ax</pre>
                <p>To run your compiled program:</p>
                <pre>axolotl run yourfile.ax</pre>
            `,
            paradigms: `
                <h2>Object-Oriented Programming</h2>
                <table>
                    <tr>
                        <th>Principle</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                        <td>Encapsulation</td>
                        <td>Data and methods are combined within classes</td>
                    </tr>
                    <tr>
                        <td>Inheritance</td>
                        <td>Ability to extend functionality of base classes</td>
                    </tr>
                    <tr>
                        <td>Polymorphism</td>
                        <td>Universal interface for interacting with different objects</td>
                    </tr>
                    <tr>
                        <td>Abstraction</td>
                        <td>Highlighting significant characteristics of an object, hiding implementation details</td>
                    </tr>
                </table>

                <h2>Event-Driven Programming</h2>
                <table>
                    <tr>
                        <th>Principle</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                        <td>Event Model</td>
                        <td>System built around events that represent key state changes</td>
                    </tr>
                    <tr>
                        <td>Asynchronicity</td>
                        <td>Events are processed in non-blocking mode, ensuring high performance</td>
                    </tr>
                    <tr>
                        <td>Event Handlers</td>
                        <td>Application logic defined through functions registered to handle specific events</td>
                    </tr>
                    <tr>
                        <td>Component Binding</td>
                        <td>Application components interact through events, not directly, reducing coupling</td>
                    </tr>
                </table>

                <h2>Functional Programming</h2>
                <table>
                    <tr>
                        <th>Principle</th>
                        <th>Description</th>
                    </tr>
                    <tr>
                        <td>Pure Functions</td>
                        <td>Functions whose result depends only on their input data, without side effects</td>
                    </tr>
                    <tr>
                        <td>Immutability</td>
                        <td>Using immutable data to simplify state tracking</td>
                    </tr>
                    <tr>
                        <td>Higher-Order Functions</td>
                        <td>Functions that take other functions as arguments or return them</td>
                    </tr>
                    <tr>
                        <td>Lambda Expressions</td>
                        <td>Anonymous functions for concise behavior description</td>
                    </tr>
                    <tr>
                        <td>Currying</td>
                        <td>Splitting a function with multiple arguments into multiple functions with one argument</td>
                    </tr>
                </table>
            `,
            functions: `
                <h2>Functions</h2>
                <p>Axolotl supports functions. You can define a function using the <code>def</code> keyword:</p>
                <pre>
def greet(name: String): String {
    return "Hello, " + name + "!";
}
                </pre>
                <p>Functions can have default parameters:</p>
                <pre>
def greet(name: String = "World"): String {
    return "Hello, " + name + "!";
}
                </pre>
            `,
            methods: `
                <h2>Methods</h2>
                <p>Methods are functions that belong to a class. They can access the instance's properties:</p>
                <pre>
class Person {
    private name: String;
    
    constructor(name: String) {
        this.name = name;
    }
    
    def greet(): String {
        return "Hello, I'm " + this.name;
    }
}
                </pre>
            `,
            interfaces: `
                <h2>Interfaces</h2>
                <p>Interfaces define contracts that classes must implement:</p>
                <pre>
interface Drawable {
    def draw(): void;
    def getArea(): Number;
}

class Circle implements Drawable {
    private radius: Number;
    
    constructor(radius: Number) {
        this.radius = radius;
    }
    
    def draw(): void {
        // Drawing logic
    }
    
    def getArea(): Number {
        return Math.PI * this.radius * this.radius;
    }
}
                </pre>
            `,
            abstractClasses: `
                <h2>Abstract Classes</h2>
                <p>Abstract classes cannot be instantiated directly and may contain abstract methods:</p>
                <pre>
abstract class Animal {
    protected name: String;
    
    constructor(name: String) {
        this.name = name;
    }
    
    abstract def makeSound(): String;
    
    def getName(): String {
        return this.name;
    }
}

class Dog extends Animal {
    def makeSound(): String {
        return "Woof!";
    }
}
                </pre>
            `,
            classes: `
                <h2>Classes</h2>
                <p>Classes are the fundamental building blocks of object-oriented programming in Axolotl:</p>
                <pre>
class Vehicle {
    private speed: Number;
    private fuel: Number;
    
    constructor(initialFuel: Number) {
        this.speed = 0;
        this.fuel = initialFuel;
    }
    
    def accelerate(amount: Number): void {
        if (this.fuel > 0) {
            this.speed += amount;
            this.fuel -= amount * 0.1;
        }
    }
    
    def getSpeed(): Number {
        return this.speed;
    }
}
                </pre>
            `,
            handlers: `
                <h2>Event Handlers</h2>
                <p>Event handlers are special functions that respond to events:</p>
                <pre>
event UserClick {
    x: Number;
    y: Number;
}

handler onUserClick(event: UserClick) {
    console.log("User clicked at: " + event.x + ", " + event.y);
}

// Register the handler
register(UserClick, onUserClick);
                </pre>
            `,
            abstractModules: `
                <h2>Abstract Modules</h2>
                <p>Abstract modules define interfaces for modules that must be implemented:</p>
                <pre>
abstract module DatabaseModule {
    abstract def connect(connectionString: String): void;
    abstract def query(sql: String): Array&lt;Object&gt;;
    abstract def disconnect(): void;
}
                </pre>
            `,
            modules: `
                <h2>Modules</h2>
                <p>Modules are containers for related functionality:</p>
                <pre>
module MathUtils {
    def add(a: Number, b: Number): Number {
        return a + b;
    }
    
    def multiply(a: Number, b: Number): Number {
        return a * b;
    }
    
    const PI: Number = 3.14159;
}

// Usage
import MathUtils;
let result = MathUtils.add(5, 3);
                </pre>
            `,
            annotations: `
                <h2>Annotations</h2>
                <p>Annotations provide metadata about code elements:</p>
                <pre>
@Deprecated("Use newMethod instead")
def oldMethod(): void {
    // Old implementation
}

@Override
def toString(): String {
    return "Custom string representation";
}

@Async
def fetchData(): Promise&lt;String&gt; {
    // Asynchronous operation
}
                </pre>
            `,
            decorators: `
                <h2>Decorators</h2>
                <p>Decorators modify the behavior of classes and methods:</p>
                <pre>
@Component
class UserService {
    @Inject("userRepository")
    private repository: UserRepository;
    
    @Cache(timeout: 300)
    def getUser(id: Number): User {
        return this.repository.findById(id);
    }
}
                </pre>
            `
        }
    },
    RU: {
        header: ["Ð ÐµÐ´Ð°ÐºÑÐ¾Ñ", "ÐÐ¾ÐºÑÐ¼ÐµÐ½ÑÐ°ÑÐ¸Ñ", "ÐÐ»Ð°Ð²Ð½Ð°Ñ", "Ð¡Ð¾Ð¾Ð±ÑÐµÑÑÐ²Ð¾"],
        mainInfo: "ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÐ°Ð½ Ð² Ð¿ÐµÑÐ²ÑÑ Ð¾ÑÐµÑÐµÐ´Ñ ÐºÐ°Ðº ÑÐ¾Ð±ÑÑÐ¸Ð¹Ð½Ð¾-Ð¾ÑÐ¸ÐµÐ½ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð½ÑÐ¹ Ð¸ Ð¾Ð±ÑÐµÐºÑÐ½Ð¾-Ð¾ÑÐ¸ÐµÐ½ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð½ÑÐ¹. ÐÐ¾Ð¼Ð±Ð¸Ð½Ð°ÑÐ¸Ñ Ð´Ð²ÑÑ Ð¿Ð°ÑÐ°Ð´Ð¸Ð³Ð¼ Ð·Ð½Ð°ÑÐ¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐ¿ÑÐ¾ÑÑÐ¸Ñ ÑÐ°Ð·ÑÐ°Ð±Ð¾ÑÐºÑ Ð°ÑÑÐ¸ÑÐµÐºÑÑÑÑ Ð²Ð°ÑÐ¸Ñ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼ Ð¿ÑÐ¸ ÑÐ¾Ð±Ð»ÑÐ´ÐµÐ½Ð¸Ð¸ Ð¿ÑÐµÐ´ÑÑÐ¼Ð¾ÑÑÐµÐ½Ð½ÑÑ ÑÐ¾Ð³Ð»Ð°ÑÐµÐ½Ð¸Ð¹.",
        advantages: "ÐÐµÑÐºÐ¾Ð»ÑÐºÐ¾ Ð¿ÑÐ¸Ð¼ÐµÑÐ¾Ð² Ð¿ÑÐµÐ¸Ð¼ÑÑÐµÑÑÐ² axl: Ð²ÑÑÐ¾ÐºÐ°Ñ Ð¿ÑÐ¾Ð¸Ð·Ð²Ð¾Ð´Ð¸ÑÐµÐ»ÑÐ½Ð¾ÑÑÑ, Ð¿ÑÐ¾ÑÑÐ¾ÑÐ° Ð¸Ð·ÑÑÐµÐ½Ð¸Ñ, Ð³Ð¸Ð±ÐºÐ¸Ð¹ ÑÐ¸Ð½ÑÐ°ÐºÑÐ¸Ñ, ÑÑÑÐ¾Ð³Ð°Ñ ÑÐ¸Ð¿Ð¸Ð·Ð°ÑÐ¸Ñ Ð¸ Ð¾ÑÐ»Ð¸ÑÐ½Ð°Ñ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶ÐºÐ° Ð¸Ð½ÑÑÑÑÐ¼ÐµÐ½ÑÐ¾Ð².",
        footer: ["Â© 2024 ÐÐ¾Ð¼Ð°Ð½Ð´Ð° Axolotl", "ÐÐ¾Ð»Ð¸ÑÐ¸ÐºÐ° ÐºÐ¾Ð½ÑÐ¸Ð´ÐµÐ½ÑÐ¸Ð°Ð»ÑÐ½Ð¾ÑÑÐ¸", "Ð£ÑÐ»Ð¾Ð²Ð¸Ñ Ð¸ÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ñ", "Ð¡Ð²ÑÐ·Ð°ÑÑÑÑ Ñ Ð½Ð°Ð¼Ð¸"],
        buttons: ["ÐÐ", "ÐÑÐ¼ÐµÐ½Ð°", "ÐÑÐ¸Ð½ÑÑÑ", "ÐÐ¾Ð´ÑÐ¾Ð±Ð½ÐµÐµ"],
        window: ["Ð¯Ð·ÑÐº Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ Axolotl"],
        docs: {
            headers: ["ÐÐ²ÐµÐ´ÐµÐ½Ð¸Ðµ", "ÐÐ°ÑÐ°Ð´Ð¸Ð³Ð¼Ñ", "Ð¤ÑÐ½ÐºÑÐ¸Ð¸", "ÐÐµÑÐ¾Ð´Ñ", "ÐÐ½ÑÐµÑÑÐµÐ¹ÑÑ", "ÐÐ±ÑÑÑÐ°ÐºÑÐ½ÑÐµ ÐºÐ»Ð°ÑÑÑ", "ÐÐ»Ð°ÑÑÑ", "ÐÐ±ÑÐ°Ð±Ð¾ÑÑÐ¸ÐºÐ¸", "ÐÐ±ÑÑÑÐ°ÐºÑÐ½ÑÐµ Ð¼Ð¾Ð´ÑÐ»Ð¸", "ÐÐ¾Ð´ÑÐ»Ð¸", "ÐÐ½Ð½Ð¾ÑÐ°ÑÐ¸Ð¸", "ÐÐµÐºÐ¾ÑÐ°ÑÐ¾ÑÑ"],
            pageNav: {
                introduction: ["ÐÐ°ÑÐ°Ð»Ð¾ ÑÐ°Ð±Ð¾ÑÑ", "ÐÐ²ÐµÐ´ÐµÐ½Ð¸Ðµ"],
                paradigms: ["ÐÐ±ÑÐµÐºÑÐ½Ð¾-Ð¾ÑÐ¸ÐµÐ½ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð½Ð¾Ðµ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ", "Ð¡Ð¾Ð±ÑÑÐ¸Ð¹Ð½Ð¾-Ð¾ÑÐ¸ÐµÐ½ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð½Ð¾Ðµ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ", "Ð¤ÑÐ½ÐºÑÐ¸Ð¾Ð½Ð°Ð»ÑÐ½Ð¾Ðµ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ"],
                functions: ["Ð¤ÑÐ½ÐºÑÐ¸Ð¸", "ÐÐµÑÐ¾Ð´Ñ", "ÐÐ½ÑÐµÑÑÐµÐ¹ÑÑ", "ÐÐ±ÑÑÑÐ°ÐºÑÐ½ÑÐµ ÐºÐ»Ð°ÑÑÑ", "ÐÐ»Ð°ÑÑÑ", "ÐÐ±ÑÐ°Ð±Ð¾ÑÑÐ¸ÐºÐ¸", "ÐÐ±ÑÑÑÐ°ÐºÑÐ½ÑÐµ Ð¼Ð¾Ð´ÑÐ»Ð¸", "ÐÐ¾Ð´ÑÐ»Ð¸"],
                methods: ["ÐÐ½Ð½Ð¾ÑÐ°ÑÐ¸Ð¸", "ÐÐµÐºÐ¾ÑÐ°ÑÐ¾ÑÑ"],
            },
            introduction: `
                <h2>ÐÐ°ÑÐ°Ð»Ð¾ ÑÐ°Ð±Ð¾ÑÑ</h2>
                <p>Ð¡Ð½Ð°ÑÐ°Ð»Ð° Ð²Ð°Ð¼ Ð½ÑÐ¶Ð½Ð¾ ÑÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÑ ÐºÐ¾Ð¼Ð¿Ð¸Ð»ÑÑÐ¾Ñ Axolotl. ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ ÑÐ´ÐµÐ»Ð°ÑÑ ÑÑÐ¾, Ð·Ð°Ð¿ÑÑÑÐ¸Ð² ÑÐ»ÐµÐ´ÑÑÑÑÑ ÐºÐ¾Ð¼Ð°Ð½Ð´Ñ:</p>
                <pre>npm install -g axolotl-compiler</pre>
                <p>ÐÐ¾ÑÐ»Ðµ ÑÑÐ¾Ð³Ð¾ Ð²Ñ Ð¼Ð¾Ð¶ÐµÑÐµ ÑÐºÐ¾Ð¼Ð¿Ð¸Ð»Ð¸ÑÐ¾Ð²Ð°ÑÑ ÑÐ²Ð¾Ð¹ ÐºÐ¾Ð´ Axolotl, Ð·Ð°Ð¿ÑÑÑÐ¸Ð² ÑÐ»ÐµÐ´ÑÑÑÑÑ ÐºÐ¾Ð¼Ð°Ð½Ð´Ñ:</p>
                <pre>axolotl compile yourfile.ax</pre>
                <p>Ð§ÑÐ¾Ð±Ñ Ð·Ð°Ð¿ÑÑÑÐ¸ÑÑ ÑÐºÐ¾Ð¼Ð¿Ð¸Ð»Ð¸ÑÐ¾Ð²Ð°Ð½Ð½ÑÑ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ñ:</p>
                <pre>axolotl run yourfile.ax</pre>
            `,
            paradigms: `
                <h2>ÐÐ±ÑÐµÐºÑÐ½Ð¾-Ð¾ÑÐ¸ÐµÐ½ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð½Ð¾Ðµ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ</h2>
                <table>
                    <tr>
                        <th>ÐÑÐ¸Ð½ÑÐ¸Ð¿</th>
                        <th>ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ</th>
                    </tr>
                    <tr>
                        <td>ÐÐ½ÐºÐ°Ð¿ÑÑÐ»ÑÑÐ¸Ñ</td>
                        <td>ÐÐ°Ð½Ð½ÑÐµ Ð¸ Ð¼ÐµÑÐ¾Ð´Ñ Ð¾Ð±ÑÐµÐ´Ð¸Ð½ÐµÐ½Ñ Ð² ÑÐ°Ð¼ÐºÐ°Ñ ÐºÐ»Ð°ÑÑÐ¾Ð²</td>
                    </tr>
                    <tr>
                        <td>ÐÐ°ÑÐ»ÐµÐ´Ð¾Ð²Ð°Ð½Ð¸Ðµ</td>
                        <td>ÐÐ¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ÑÑÑ ÑÐ°ÑÑÐ¸ÑÐµÐ½Ð¸Ñ ÑÑÐ½ÐºÑÐ¸Ð¾Ð½Ð°Ð»ÑÐ½Ð¾ÑÑÐ¸ Ð±Ð°Ð·Ð¾Ð²ÑÑ ÐºÐ»Ð°ÑÑÐ¾Ð²</td>
                    </tr>
                    <tr>
                        <td>ÐÐ¾Ð»Ð¸Ð¼Ð¾ÑÑÐ¸Ð·Ð¼</td>
                        <td>Ð£Ð½Ð¸Ð²ÐµÑÑÐ°Ð»ÑÐ½ÑÐ¹ Ð¸Ð½ÑÐµÑÑÐµÐ¹Ñ Ð´Ð»Ñ Ð²Ð·Ð°Ð¸Ð¼Ð¾Ð´ÐµÐ¹ÑÑÐ²Ð¸Ñ Ñ ÑÐ°Ð·Ð»Ð¸ÑÐ½ÑÐ¼Ð¸ Ð¾Ð±ÑÐµÐºÑÐ°Ð¼Ð¸</td>
                    </tr>
                    <tr>
                        <td>ÐÐ±ÑÑÑÐ°ÐºÑÐ¸Ñ</td>
                        <td>ÐÑÐ´ÐµÐ»ÐµÐ½Ð¸Ðµ Ð·Ð½Ð°ÑÐ¸Ð¼ÑÑ ÑÐ°ÑÐ°ÐºÑÐµÑÐ¸ÑÑÐ¸Ðº Ð¾Ð±ÑÐµÐºÑÐ°, ÑÐºÑÑÑÐ¸Ðµ Ð´ÐµÑÐ°Ð»ÐµÐ¹ ÑÐµÐ°Ð»Ð¸Ð·Ð°ÑÐ¸Ð¸</td>
                    </tr>
                </table>

                <h2>Ð¡Ð¾Ð±ÑÑÐ¸Ð¹Ð½Ð¾-Ð¾ÑÐ¸ÐµÐ½ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð½Ð¾Ðµ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ</h2>
                <table>
                    <tr>
                        <th>ÐÑÐ¸Ð½ÑÐ¸Ð¿</th>
                        <th>ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ</th>
                    </tr>
                    <tr>
                        <td>Ð¡Ð¾Ð±ÑÑÐ¸Ð¹Ð½Ð°Ñ Ð¼Ð¾Ð´ÐµÐ»Ñ</td>
                        <td>Ð¡Ð¸ÑÑÐµÐ¼Ð° Ð¿Ð¾ÑÑÑÐ¾ÐµÐ½Ð° Ð²Ð¾ÐºÑÑÐ³ ÑÐ¾Ð±ÑÑÐ¸Ð¹, ÐºÐ¾ÑÐ¾ÑÑÐµ Ð¿ÑÐµÐ´ÑÑÐ°Ð²Ð»ÑÑÑ ÑÐ¾Ð±Ð¾Ð¹ ÐºÐ»ÑÑÐµÐ²ÑÐµ Ð¸Ð·Ð¼ÐµÐ½ÐµÐ½Ð¸Ñ ÑÐ¾ÑÑÐ¾ÑÐ½Ð¸Ñ</td>
                    </tr>
                    <tr>
                        <td>ÐÑÐ¸Ð½ÑÑÐ¾Ð½Ð½Ð¾ÑÑÑ</td>
                        <td>Ð¡Ð¾Ð±ÑÑÐ¸Ñ Ð¾Ð±ÑÐ°Ð±Ð°ÑÑÐ²Ð°ÑÑÑÑ Ð² Ð½ÐµÐ±Ð»Ð¾ÐºÐ¸ÑÑÑÑÐµÐ¼ ÑÐµÐ¶Ð¸Ð¼Ðµ, Ð¾Ð±ÐµÑÐ¿ÐµÑÐ¸Ð²Ð°Ñ Ð²ÑÑÐ¾ÐºÑÑ Ð¿ÑÐ¾Ð¸Ð·Ð²Ð¾Ð´Ð¸ÑÐµÐ»ÑÐ½Ð¾ÑÑÑ</td>
                    </tr>
                    <tr>
                        <td>ÐÐ±ÑÐ°Ð±Ð¾ÑÑÐ¸ÐºÐ¸ ÑÐ¾Ð±ÑÑÐ¸Ð¹</td>
                        <td>ÐÐ¾Ð³Ð¸ÐºÐ° Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÑÐµÑÑÑ ÑÐµÑÐµÐ· ÑÑÐ½ÐºÑÐ¸Ð¸, ÑÐµÐ³Ð¸ÑÑÑÐ¸ÑÑÐµÐ¼ÑÐµ Ð´Ð»Ñ Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ¸ Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÑÐ½Ð½ÑÑ ÑÐ¾Ð±ÑÑÐ¸Ð¹</td>
                    </tr>
                    <tr>
                        <td>Ð¡Ð²ÑÐ·ÑÐ²Ð°Ð½Ð¸Ðµ ÐºÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÐ¾Ð²</td>
                        <td>ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½ÑÑ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ Ð²Ð·Ð°Ð¸Ð¼Ð¾Ð´ÐµÐ¹ÑÑÐ²ÑÑÑ ÑÐµÑÐµÐ· ÑÐ¾Ð±ÑÑÐ¸Ñ, Ð° Ð½Ðµ Ð½Ð°Ð¿ÑÑÐ¼ÑÑ, ÑÑÐ¾ ÑÐ½Ð¸Ð¶Ð°ÐµÑ ÑÐ²ÑÐ·Ð°Ð½Ð½Ð¾ÑÑÑ</td>
                    </tr>
                </table>

                <h2>Ð¤ÑÐ½ÐºÑÐ¸Ð¾Ð½Ð°Ð»ÑÐ½Ð¾Ðµ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ</h2>
                <table>
                    <tr>
                        <th>ÐÑÐ¸Ð½ÑÐ¸Ð¿</th>
                        <th>ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ</th>
                    </tr>
                    <tr>
                        <td>Ð§Ð¸ÑÑÑÐµ ÑÑÐ½ÐºÑÐ¸Ð¸</td>
                        <td>Ð¤ÑÐ½ÐºÑÐ¸Ð¸, ÑÐµÐ·ÑÐ»ÑÑÐ°Ñ ÐºÐ¾ÑÐ¾ÑÑÑ Ð·Ð°Ð²Ð¸ÑÐ¸Ñ ÑÐ¾Ð»ÑÐºÐ¾ Ð¾Ñ Ð¸Ñ Ð²ÑÐ¾Ð´Ð½ÑÑ Ð´Ð°Ð½Ð½ÑÑ, Ð±ÐµÐ· Ð¿Ð¾Ð±Ð¾ÑÐ½ÑÑ ÑÑÑÐµÐºÑÐ¾Ð²</td>
                    </tr>
                    <tr>
                        <td>ÐÐµÐ¸Ð·Ð¼ÐµÐ½ÑÐµÐ¼Ð¾ÑÑÑ</td>
                        <td>ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð½ÐµÐ¸Ð·Ð¼ÐµÐ½ÑÐµÐ¼ÑÑ Ð´Ð°Ð½Ð½ÑÑ Ð´Ð»Ñ ÑÐ¿ÑÐ¾ÑÐµÐ½Ð¸Ñ Ð¾ÑÑÐ»ÐµÐ¶Ð¸Ð²Ð°Ð½Ð¸Ñ ÑÐ¾ÑÑÐ¾ÑÐ½Ð¸Ñ</td>
                    </tr>
                    <tr>
                        <td>Ð¤ÑÐ½ÐºÑÐ¸Ð¸ Ð²ÑÑÑÐµÐ³Ð¾ Ð¿Ð¾ÑÑÐ´ÐºÐ°</td>
                        <td>Ð¤ÑÐ½ÐºÑÐ¸Ð¸, ÐºÐ¾ÑÐ¾ÑÑÐµ Ð¿ÑÐ¸Ð½Ð¸Ð¼Ð°ÑÑ Ð² ÐºÐ°ÑÐµÑÑÐ²Ðµ Ð°ÑÐ³ÑÐ¼ÐµÐ½ÑÐ¾Ð² Ð´ÑÑÐ³Ð¸Ðµ ÑÑÐ½ÐºÑÐ¸Ð¸ Ð¸Ð»Ð¸ Ð²Ð¾Ð·Ð²ÑÐ°ÑÐ°ÑÑ Ð¸Ñ</td>
                    </tr>
                    <tr>
                        <td>ÐÑÐ¼Ð±Ð´Ð°-Ð²ÑÑÐ°Ð¶ÐµÐ½Ð¸Ñ</td>
                        <td>ÐÐ½Ð¾Ð½Ð¸Ð¼Ð½ÑÐµ ÑÑÐ½ÐºÑÐ¸Ð¸ Ð´Ð»Ñ Ð»Ð°ÐºÐ¾Ð½Ð¸ÑÐ½Ð¾Ð³Ð¾ Ð¾Ð¿Ð¸ÑÐ°Ð½Ð¸Ñ Ð¿Ð¾Ð²ÐµÐ´ÐµÐ½Ð¸Ñ</td>
                    </tr>
                    <tr>
                        <td>ÐÐ°ÑÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ</td>
                        <td>Ð Ð°Ð·Ð´ÐµÐ»ÐµÐ½Ð¸Ðµ ÑÑÐ½ÐºÑÐ¸Ð¸ Ñ Ð½ÐµÑÐºÐ¾Ð»ÑÐºÐ¸Ð¼Ð¸ Ð°ÑÐ³ÑÐ¼ÐµÐ½ÑÐ°Ð¼Ð¸ Ð½Ð° Ð½ÐµÑÐºÐ¾Ð»ÑÐºÐ¾ ÑÑÐ½ÐºÑÐ¸Ð¹ Ñ Ð¾Ð´Ð½Ð¸Ð¼ Ð°ÑÐ³ÑÐ¼ÐµÐ½ÑÐ¾Ð¼</td>
                    </tr>
                </table>
            `,
            functions: `
                <h2>Ð¤ÑÐ½ÐºÑÐ¸Ð¸</h2>
                <p>Axolotl Ð¿Ð¾Ð´Ð´ÐµÑÐ¶Ð¸Ð²Ð°ÐµÑ ÑÑÐ½ÐºÑÐ¸Ð¸. ÐÑ Ð¼Ð¾Ð¶ÐµÑÐµ Ð¾Ð¿ÑÐµÐ´ÐµÐ»Ð¸ÑÑ ÑÑÐ½ÐºÑÐ¸Ñ Ñ Ð¿Ð¾Ð¼Ð¾ÑÑÑ ÐºÐ»ÑÑÐµÐ²Ð¾Ð³Ð¾ ÑÐ»Ð¾Ð²Ð° <code>def</code>:</p>
                <pre>
def Ð¿ÑÐ¸Ð²ÐµÑÑÑÐ²Ð¸Ðµ(Ð¸Ð¼Ñ: String): String {
    return "ÐÑÐ¸Ð²ÐµÑ, " + Ð¸Ð¼Ñ + "!";
}
                </pre>
                <p>Ð¤ÑÐ½ÐºÑÐ¸Ð¸ Ð¼Ð¾Ð³ÑÑ Ð¸Ð¼ÐµÑÑ Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÑ Ð¿Ð¾ ÑÐ¼Ð¾Ð»ÑÐ°Ð½Ð¸Ñ:</p>
                <pre>
def Ð¿ÑÐ¸Ð²ÐµÑÑÑÐ²Ð¸Ðµ(Ð¸Ð¼Ñ: String = "ÐÐ¸Ñ"): String {
    return "ÐÑÐ¸Ð²ÐµÑ, " + Ð¸Ð¼Ñ + "!";
}
                </pre>
            `,
            methods: `
                <h2>ÐÐµÑÐ¾Ð´Ñ</h2>
                <p>ÐÐµÑÐ¾Ð´Ñ - ÑÑÐ¾ ÑÑÐ½ÐºÑÐ¸Ð¸, Ð¿ÑÐ¸Ð½Ð°Ð´Ð»ÐµÐ¶Ð°ÑÐ¸Ðµ ÐºÐ»Ð°ÑÑÑ. ÐÐ½Ð¸ Ð¼Ð¾Ð³ÑÑ Ð¿Ð¾Ð»ÑÑÐ°ÑÑ Ð´Ð¾ÑÑÑÐ¿ Ðº ÑÐ²Ð¾Ð¹ÑÑÐ²Ð°Ð¼ ÑÐºÐ·ÐµÐ¼Ð¿Ð»ÑÑÐ°:</p>
                <pre>
class Ð§ÐµÐ»Ð¾Ð²ÐµÐº {
    private Ð¸Ð¼Ñ: String;
    
    constructor(Ð¸Ð¼Ñ: String) {
        this.Ð¸Ð¼Ñ = Ð¸Ð¼Ñ;
    }
    
    def Ð¿ÑÐ¸Ð²ÐµÑÑÑÐ²Ð¸Ðµ(): String {
        return "ÐÑÐ¸Ð²ÐµÑ, Ñ " + this.Ð¸Ð¼Ñ;
    }
}
                </pre>
            `,
            interfaces: `
                <h2>ÐÐ½ÑÐµÑÑÐµÐ¹ÑÑ</h2>
                <p>ÐÐ½ÑÐµÑÑÐµÐ¹ÑÑ Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÑÑÑ ÐºÐ¾Ð½ÑÑÐ°ÐºÑÑ, ÐºÐ¾ÑÐ¾ÑÑÐµ Ð´Ð¾Ð»Ð¶Ð½Ñ ÑÐµÐ°Ð»Ð¸Ð·Ð¾Ð²Ð°ÑÑ ÐºÐ»Ð°ÑÑÑ:</p>
                <pre>
interface Ð Ð¸ÑÑÐµÐ¼ÑÐ¹ {
    def ÑÐ¸ÑÐ¾Ð²Ð°ÑÑ(): void;
    def Ð¿Ð¾Ð»ÑÑÐ¸ÑÑÐÐ»Ð¾ÑÐ°Ð´Ñ(): Number;
}

class ÐÑÑÐ³ implements Ð Ð¸ÑÑÐµÐ¼ÑÐ¹ {
    private ÑÐ°Ð´Ð¸ÑÑ: Number;
    
    constructor(ÑÐ°Ð´Ð¸ÑÑ: Number) {
        this.ÑÐ°Ð´Ð¸ÑÑ = ÑÐ°Ð´Ð¸ÑÑ;
    }
    
    def ÑÐ¸ÑÐ¾Ð²Ð°ÑÑ(): void {
        // ÐÐ¾Ð³Ð¸ÐºÐ° ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ
    }
    
    def Ð¿Ð¾Ð»ÑÑÐ¸ÑÑÐÐ»Ð¾ÑÐ°Ð´Ñ(): Number {
        return Math.PI * this.ÑÐ°Ð´Ð¸ÑÑ * this.ÑÐ°Ð´Ð¸ÑÑ;
    }
}
                </pre>
            `,
            abstractClasses: `
                <h2>ÐÐ±ÑÑÑÐ°ÐºÑÐ½ÑÐµ ÐºÐ»Ð°ÑÑÑ</h2>
                <p>ÐÐ±ÑÑÑÐ°ÐºÑÐ½ÑÐµ ÐºÐ»Ð°ÑÑÑ Ð½Ðµ Ð¼Ð¾Ð³ÑÑ Ð±ÑÑÑ ÑÐ¾Ð·Ð´Ð°Ð½Ñ Ð½Ð°Ð¿ÑÑÐ¼ÑÑ Ð¸ Ð¼Ð¾Ð³ÑÑ ÑÐ¾Ð´ÐµÑÐ¶Ð°ÑÑ Ð°Ð±ÑÑÑÐ°ÐºÑÐ½ÑÐµ Ð¼ÐµÑÐ¾Ð´Ñ:</p>
                <pre>
abstract class ÐÐ¸Ð²Ð¾ÑÐ½Ð¾Ðµ {
    protected Ð¸Ð¼Ñ: String;
    
    constructor(Ð¸Ð¼Ñ: String) {
        this.Ð¸Ð¼Ñ = Ð¸Ð¼Ñ;
    }
    
    abstract def Ð¸Ð·Ð´Ð°ÑÑÐÐ²ÑÐº(): String;
    
    def Ð¿Ð¾Ð»ÑÑÐ¸ÑÑÐÐ¼Ñ(): String {
        return this.Ð¸Ð¼Ñ;
    }
}

class Ð¡Ð¾Ð±Ð°ÐºÐ° extends ÐÐ¸Ð²Ð¾ÑÐ½Ð¾Ðµ {
    def Ð¸Ð·Ð´Ð°ÑÑÐÐ²ÑÐº(): String {
        return "ÐÐ°Ð²!";
    }
}
                </pre>
            `,
            classes: `
                <h2>ÐÐ»Ð°ÑÑÑ</h2>
                <p>ÐÐ»Ð°ÑÑÑ ÑÐ²Ð»ÑÑÑÑÑ Ð¾ÑÐ½Ð¾Ð²Ð½ÑÐ¼Ð¸ ÑÑÑÐ¾Ð¸ÑÐµÐ»ÑÐ½ÑÐ¼Ð¸ Ð±Ð»Ð¾ÐºÐ°Ð¼Ð¸ Ð¾Ð±ÑÐµÐºÑÐ½Ð¾-Ð¾ÑÐ¸ÐµÐ½ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð½Ð¾Ð³Ð¾ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ Ð² Axolotl:</p>
                <pre>
class Ð¢ÑÐ°Ð½ÑÐ¿Ð¾ÑÑ {
    private ÑÐºÐ¾ÑÐ¾ÑÑÑ: Number;
    private ÑÐ¾Ð¿Ð»Ð¸Ð²Ð¾: Number;
    
    constructor(Ð½Ð°ÑÐ°Ð»ÑÐ½Ð¾ÐµÐ¢Ð¾Ð¿Ð»Ð¸Ð²Ð¾: Number) {
        this.ÑÐºÐ¾ÑÐ¾ÑÑÑ = 0;
        this.ÑÐ¾Ð¿Ð»Ð¸Ð²Ð¾ = Ð½Ð°ÑÐ°Ð»ÑÐ½Ð¾ÐµÐ¢Ð¾Ð¿Ð»Ð¸Ð²Ð¾;
    }
    
    def ÑÑÐºÐ¾ÑÐ¸ÑÑÑÑ(ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾: Number): void {
        if (this.ÑÐ¾Ð¿Ð»Ð¸Ð²Ð¾ > 0) {
            this.ÑÐºÐ¾ÑÐ¾ÑÑÑ += ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾;
            this.ÑÐ¾Ð¿Ð»Ð¸Ð²Ð¾ -= ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ * 0.1;
        }
    }
    
    def Ð¿Ð¾Ð»ÑÑÐ¸ÑÑÐ¡ÐºÐ¾ÑÐ¾ÑÑÑ(): Number {
        return this.ÑÐºÐ¾ÑÐ¾ÑÑÑ;
    }
}
                </pre>
            `,
            handlers: `
                <h2>ÐÐ±ÑÐ°Ð±Ð¾ÑÑÐ¸ÐºÐ¸ ÑÐ¾Ð±ÑÑÐ¸Ð¹</h2>
                <p>ÐÐ±ÑÐ°Ð±Ð¾ÑÑÐ¸ÐºÐ¸ ÑÐ¾Ð±ÑÑÐ¸Ð¹ - ÑÑÐ¾ ÑÐ¿ÐµÑÐ¸Ð°Ð»ÑÐ½ÑÐµ ÑÑÐ½ÐºÑÐ¸Ð¸, ÐºÐ¾ÑÐ¾ÑÑÐµ ÑÐµÐ°Ð³Ð¸ÑÑÑÑ Ð½Ð° ÑÐ¾Ð±ÑÑÐ¸Ñ:</p>
                <pre>
event ÐÐ»Ð¸ÐºÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ {
    x: Number;
    y: Number;
}

handler Ð½Ð°ÐÐ»Ð¸ÐºÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ(ÑÐ¾Ð±ÑÑÐ¸Ðµ: ÐÐ»Ð¸ÐºÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ) {
    console.log("ÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ ÐºÐ»Ð¸ÐºÐ½ÑÐ» Ð²: " + ÑÐ¾Ð±ÑÑÐ¸Ðµ.x + ", " + ÑÐ¾Ð±ÑÑÐ¸Ðµ.y);
}

// Ð ÐµÐ³Ð¸ÑÑÑÐ°ÑÐ¸Ñ Ð¾Ð±ÑÐ°Ð±Ð¾ÑÑÐ¸ÐºÐ°
register(ÐÐ»Ð¸ÐºÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ, Ð½Ð°ÐÐ»Ð¸ÐºÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ);
                </pre>
            `,
            abstractModules: `
                <h2>ÐÐ±ÑÑÑÐ°ÐºÑÐ½ÑÐµ Ð¼Ð¾Ð´ÑÐ»Ð¸</h2>
                <p>ÐÐ±ÑÑÑÐ°ÐºÑÐ½ÑÐµ Ð¼Ð¾Ð´ÑÐ»Ð¸ Ð¾Ð¿ÑÐµÐ´ÐµÐ»ÑÑÑ Ð¸Ð½ÑÐµÑÑÐµÐ¹ÑÑ Ð´Ð»Ñ Ð¼Ð¾Ð´ÑÐ»ÐµÐ¹, ÐºÐ¾ÑÐ¾ÑÑÐµ Ð´Ð¾Ð»Ð¶Ð½Ñ Ð±ÑÑÑ ÑÐµÐ°Ð»Ð¸Ð·Ð¾Ð²Ð°Ð½Ñ:</p>
                <pre>
abstract module ÐÐ¾Ð´ÑÐ»ÑÐÐ°Ð·ÑÐÐ°Ð½Ð½ÑÑ {
    abstract def Ð¿Ð¾Ð´ÐºÐ»ÑÑÐ¸ÑÑÑÑ(ÑÑÑÐ¾ÐºÐ°ÐÐ¾Ð´ÐºÐ»ÑÑÐµÐ½Ð¸Ñ: String): void;
    abstract def Ð·Ð°Ð¿ÑÐ¾Ñ(sql: String): Array&lt;Object&gt;;
    abstract def Ð¾ÑÐºÐ»ÑÑÐ¸ÑÑÑÑ(): void;
}
                </pre>
            `,
            modules: `
                <h2>ÐÐ¾Ð´ÑÐ»Ð¸</h2>
                <p>ÐÐ¾Ð´ÑÐ»Ð¸ - ÑÑÐ¾ ÐºÐ¾Ð½ÑÐµÐ¹Ð½ÐµÑÑ Ð´Ð»Ñ ÑÐ²ÑÐ·Ð°Ð½Ð½Ð¾Ð¹ ÑÑÐ½ÐºÑÐ¸Ð¾Ð½Ð°Ð»ÑÐ½Ð¾ÑÑÐ¸:</p>
                <pre>
module ÐÐ°ÑÐµÐ¼Ð°ÑÐ¸ÑÐµÑÐºÐ¸ÐµÐ£ÑÐ¸Ð»Ð¸ÑÑ {
    def ÑÐ»Ð¾Ð¶Ð¸ÑÑ(a: Number, b: Number): Number {
        return a + b;
    }
    
    def ÑÐ¼Ð½Ð¾Ð¶Ð¸ÑÑ(a: Number, b: Number): Number {
        return a * b;
    }
    
    const PI: Number = 3.14159;
}

// ÐÑÐ¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ðµ
import ÐÐ°ÑÐµÐ¼Ð°ÑÐ¸ÑÐµÑÐºÐ¸ÐµÐ£ÑÐ¸Ð»Ð¸ÑÑ;
let ÑÐµÐ·ÑÐ»ÑÑÐ°Ñ = ÐÐ°ÑÐµÐ¼Ð°ÑÐ¸ÑÐµÑÐºÐ¸ÐµÐ£ÑÐ¸Ð»Ð¸ÑÑ.ÑÐ»Ð¾Ð¶Ð¸ÑÑ(5, 3);
                </pre>
            `,
            annotations: `
                <h2>ÐÐ½Ð½Ð¾ÑÐ°ÑÐ¸Ð¸</h2>
                <p>ÐÐ½Ð½Ð¾ÑÐ°ÑÐ¸Ð¸ Ð¿ÑÐµÐ´Ð¾ÑÑÐ°Ð²Ð»ÑÑÑ Ð¼ÐµÑÐ°Ð´Ð°Ð½Ð½ÑÐµ Ð¾ ÑÐ»ÐµÐ¼ÐµÐ½ÑÐ°Ñ ÐºÐ¾Ð´Ð°:</p>
                <pre>
@Ð£ÑÑÐ°ÑÐµÐ»Ð¾("ÐÑÐ¿Ð¾Ð»ÑÐ·ÑÐ¹ÑÐµ Ð½Ð¾Ð²ÑÐ¹ÐÐµÑÐ¾Ð´ Ð²Ð¼ÐµÑÑÐ¾ ÑÑÐ¾Ð³Ð¾")
def ÑÑÐ°ÑÑÐ¹ÐÐµÑÐ¾Ð´(): void {
    // Ð¡ÑÐ°ÑÐ°Ñ ÑÐµÐ°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ
}

@ÐÐµÑÐµÐ¾Ð¿ÑÐµÐ´ÐµÐ»ÐµÐ½Ð¸Ðµ
def toString(): String {
    return "ÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÑÑÐºÐ¾Ðµ ÑÑÑÐ¾ÐºÐ¾Ð²Ð¾Ðµ Ð¿ÑÐµÐ´ÑÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ";
}

@ÐÑÐ¸Ð½ÑÑÐ¾Ð½Ð½ÑÐ¹
def Ð¿Ð¾Ð»ÑÑÐ¸ÑÑÐÐ°Ð½Ð½ÑÐµ(): Promise&lt;String&gt; {
    // ÐÑÐ¸Ð½ÑÑÐ¾Ð½Ð½Ð°Ñ Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ñ
}
                </pre>
            `,
            decorators: `
                <h2>ÐÐµÐºÐ¾ÑÐ°ÑÐ¾ÑÑ</h2>
                <p>ÐÐµÐºÐ¾ÑÐ°ÑÐ¾ÑÑ Ð¸Ð·Ð¼ÐµÐ½ÑÑÑ Ð¿Ð¾Ð²ÐµÐ´ÐµÐ½Ð¸Ðµ ÐºÐ»Ð°ÑÑÐ¾Ð² Ð¸ Ð¼ÐµÑÐ¾Ð´Ð¾Ð²:</p>
                <pre>
@ÐÐ¾Ð¼Ð¿Ð¾Ð½ÐµÐ½Ñ
class Ð¡ÐµÑÐ²Ð¸ÑÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ {
    @ÐÐ½ÐµÐ´ÑÐ¸ÑÑ("ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÐ¸Ð¹ÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ")
    private ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÐ¸Ð¹: Ð ÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÐ¸Ð¹ÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ;
    
    @ÐÑÑ(ÑÐ°Ð¹Ð¼Ð°ÑÑ: 300)
    def Ð¿Ð¾Ð»ÑÑÐ¸ÑÑÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ(id: Number): ÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ {
        return this.ÑÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÐ¸Ð¹.Ð½Ð°Ð¹ÑÐ¸ÐÐ¾Id(id);
    }
}
                </pre>
            `
        }
    },
    JA: {
        header: ["ã¨ãã£ã¿ã¼", "ãã­ã¥ã¡ã³ã", "ãã¼ã ", "ã³ãã¥ããã£"],
        mainInfo: "ä¸»ã«ã¤ãã³ãé§ååããã³ãªãã¸ã§ã¯ãæåã¨ãã¦è¨­è¨ããã¦ãã¾ãã2ã¤ã®ãã©ãã¤ã ã®çµã¿åããã«ãããæä¾ãããè¦åãéµå®ããªããããã­ã°ã©ã ã®ã¢ã¼ã­ãã¯ãã£è¨­è¨ãå¤§å¹ã«ç°¡ç´ åã§ãã¾ãã",
        advantages: "axlã®å©ç¹ã®ããã¤ãã®ä¾ï¼é«ãããã©ã¼ãã³ã¹ãç°¡åãªå­¦ç¿æ²ç·ãæè»ãªæ§æãå¼·åãªåã·ã¹ãã ãåªãããã¼ã«ãµãã¼ãã",
        footer: ["Â© 2024 Axolotlãã¼ã ", "ãã©ã¤ãã·ã¼ããªã·ã¼", "å©ç¨è¦ç´", "ãåãåãã"],
        buttons: ["OK", "ã­ã£ã³ã»ã«", "åãå¥ãã", "è©³ç´°"],
        window: ["Axolotlãã­ã°ã©ãã³ã°è¨èª"],
        docs: {
            headers: ["ã¯ããã«", "ãã©ãã¤ã ", "é¢æ°", "ã¡ã½ãã", "ã¤ã³ã¿ã¼ãã§ã¼ã¹", "æ½è±¡ã¯ã©ã¹", "ã¯ã©ã¹", "ãã³ãã©ã¼", "æ½è±¡ã¢ã¸ã¥ã¼ã«", "ã¢ã¸ã¥ã¼ã«", "ã¢ããã¼ã·ã§ã³", "ãã³ã¬ã¼ã¿ã¼"],
            pageNav: {
                introduction: ["ã¯ããã«", "ç´¹ä»"],
                paradigms: ["ãªãã¸ã§ã¯ãæåãã­ã°ã©ãã³ã°", "ã¤ãã³ãé§åãã­ã°ã©ãã³ã°", "é¢æ°åãã­ã°ã©ãã³ã°"],
                functions: ["é¢æ°", "ã¡ã½ãã", "ã¤ã³ã¿ã¼ãã§ã¼ã¹", "æ½è±¡ã¯ã©ã¹", "ã¯ã©ã¹", "ãã³ãã©ã¼", "æ½è±¡ã¢ã¸ã¥ã¼ã«", "ã¢ã¸ã¥ã¼ã«"],
                methods: ["ã¢ããã¼ã·ã§ã³", "ãã³ã¬ã¼ã¿ã¼"],
            },
            introduction: `
                <h2>ã¯ããã«</h2>
                <p>ã¾ããAxolotlã³ã³ãã¤ã©ãã¤ã³ã¹ãã¼ã«ããå¿è¦ãããã¾ããæ¬¡ã®ã³ãã³ããå®è¡ãã¦ã¤ã³ã¹ãã¼ã«ã§ãã¾ãï¼</p>
                <pre>npm install -g axolotl-compiler</pre>
                <p>ãã®å¾ãæ¬¡ã®ã³ãã³ããå®è¡ãã¦Axolotlã³ã¼ããã³ã³ãã¤ã«ã§ãã¾ãï¼</p>
                <pre>axolotl compile yourfile.ax</pre>
                <p>ã³ã³ãã¤ã«ããããã­ã°ã©ã ãå®è¡ããã«ã¯ï¼</p>
                <pre>axolotl run yourfile.ax</pre>
            `,
            paradigms: `
                <h2>ãªãã¸ã§ã¯ãæåãã­ã°ã©ãã³ã°</h2>
                <table>
                    <tr>
                        <th>åå</th>
                        <th>èª¬æ</th>
                    </tr>
                    <tr>
                        <td>ã«ãã»ã«å</td>
                        <td>ãã¼ã¿ã¨ã¡ã½ãããã¯ã©ã¹åã§çµåããã¦ãã</td>
                    </tr>
                    <tr>
                        <td>ç¶æ¿</td>
                        <td>åºåºã¯ã©ã¹ã®æ©è½ãæ¡å¼µããè½å</td>
                    </tr>
                    <tr>
                        <td>ããªã¢ã¼ãã£ãºã </td>
                        <td>ç°ãªããªãã¸ã§ã¯ãã¨å¯¾è©±ããããã®ã¦ããã¼ãµã«ã¤ã³ã¿ã¼ãã§ã¼ã¹</td>
                    </tr>
                    <tr>
                        <td>æ½è±¡å</td>
                        <td>ãªãã¸ã§ã¯ãã®éè¦ãªç¹æ§ãå¼·èª¿ããå®è£ã®è©³ç´°ãé ã</td>
                    </tr>
                </table>

                <h2>ã¤ãã³ãé§åãã­ã°ã©ãã³ã°</h2>
                <table>
                    <tr>
                        <th>åå</th>
                        <th>èª¬æ</th>
                    </tr>
                    <tr>
                        <td>ã¤ãã³ãã¢ãã«</td>
                        <td>éè¦ãªç¶æå¤åãè¡¨ãã¤ãã³ããä¸­å¿ã«æ§ç¯ãããã·ã¹ãã </td>
                    </tr>
                    <tr>
                        <td>éåææ§</td>
                        <td>ã¤ãã³ãã¯éãã­ãã­ã³ã°ã¢ã¼ãã§å¦çãããé«ãããã©ã¼ãã³ã¹ãä¿è¨¼</td>
                    </tr>
                    <tr>
                        <td>ã¤ãã³ããã³ãã©ã¼</td>
                        <td>ç¹å®ã®ã¤ãã³ããå¦çããããã«ç»é²ãããé¢æ°ãéãã¦å®ç¾©ãããã¢ããªã±ã¼ã·ã§ã³ã­ã¸ãã¯</td>
                    </tr>
                    <tr>
                        <td>ã³ã³ãã¼ãã³ããã¤ã³ãã£ã³ã°</td>
                        <td>ã¢ããªã±ã¼ã·ã§ã³ã³ã³ãã¼ãã³ãã¯ç´æ¥ã§ã¯ãªãã¤ãã³ããéãã¦ç¸äºä½ç¨ããçµååº¦ãä¸ãã</td>
                    </tr>
                </table>

                <h2>é¢æ°åãã­ã°ã©ãã³ã°</h2>
                <table>
                    <tr>
                        <th>åå</th>
                        <th>èª¬æ</th>
                    </tr>
                    <tr>
                        <td>ç´ç²é¢æ°</td>
                        <td>çµæãå¥åãã¼ã¿ã®ã¿ã«ä¾å­ããå¯ä½ç¨ã®ãªãé¢æ°</td>
                    </tr>
                    <tr>
                        <td>ä¸å¤æ§</td>
                        <td>ç¶æè¿½è·¡ãç°¡ç´ åããããã®ä¸å¤ãã¼ã¿ã®ä½¿ç¨</td>
                    </tr>
                    <tr>
                        <td>é«éé¢æ°</td>
                        <td>ä»ã®é¢æ°ãå¼æ°ã¨ãã¦åãããé¢æ°ãè¿ãé¢æ°</td>
                    </tr>
                    <tr>
                        <td>ã©ã ãå¼</td>
                        <td>è¡åãç°¡æ½ã«è¨è¿°ããããã®å¿åé¢æ°</td>
                    </tr>
                    <tr>
                        <td>ã«ãªã¼å</td>
                        <td>è¤æ°ã®å¼æ°ãæã¤é¢æ°ãåä¸ã®å¼æ°ãæã¤è¤æ°ã®é¢æ°ã«åå²</td>
                    </tr>
                </table>
            `,
        }
    }
}